feat: Implement get_record_type_schema and embed all templates

BREAKING CHANGE:
- The `create_secret` and `update_secret` tools now expect fields in a flattened dot-notation (e.g., `bankAccount.accountType`). The `value` for each field part must be a single-element string array.
- `create_secret` now returns a `folder_required_clarification` status if `folder_uid` is omitted, prompting the AI before action confirmation.

This commit introduces several major improvements to enhance AI interaction for record creation and management:

1.  **New Tool: `get_record_type_schema`**
    *   Provides a definitive way for AI to discover the fields, types, and requirements for any KSM record type.
    *   Input: `{"type": "recordTypeName"}`
    *   Output: Detailed schema including flattened field names (e.g., `bankAccount.accountType`), descriptions, underlying types, required status, and example values for enums.
    *   Eliminates AI guesswork based on existing records.

2.  **Embedded Record Templates (Comprehensive)**:
    *   Record definition templates (`fields.json`, `field-types.json`, and all `*.json` files from `standard_templates/`, `pam_templates/`, and `pam_configuration_templates/`) are now embedded directly into the `ksm-mcp` binary using Go's `embed` package.
    *   This removes the dependency on external file paths, making the application more portable and self-contained.
    *   The `internal/recordtemplates` package handles loading and parsing these embedded templates at startup.
    *   Corrected schema definitions in `field-types.json` (e.g., added missing `script` type) to ensure accurate parsing for all templates, including `pamUser`.

3.  **Improved `create_secret` Flow**:
    *   If `folder_uid` is omitted when calling `create_secret`, the MCP server now immediately returns a `folder_required_clarification` status.
    *   This response includes a list of available folders, allowing the AI to prompt the user or select a folder and retry the `create_secret` call *before* the main action confirmation.
    *   This resolves the previous issue of double confirmations for the same logical operation.

4.  **Enhanced Flattened Field Processing (`processFieldsForSDK`)**:
    *   Robustly parses dot-notation fields (e.g., `phone.type`, `passkey.privateKey`).
    *   Correctly reconstructs complex nested `map[string]interface{}` objects for the KSM Go SDK.
    *   Handles type mapping nuances (e.g., `keyPair` to SDK type `privateKey`).
    *   Attempts `strconv.ParseInt` for known numeric sub-fields like `passkey.signCount` and `passkey.createdDate`.
    *   Attempts `json.Unmarshal` for `passkey.privateKey` if provided as a JSON string.
    *   Handles string arrays for fields like `pamResources.resourceRef` (assuming comma-separated input from AI).

5.  **Updated Tool Definitions (`tools.go`)**:
    *   Descriptions for `create_secret` and `update_secret` now guide the AI to use the flattened field format and reference `get_record_type_schema`.
    *   Includes examples for complex types like `passkey` (specifying `passkey.privateKey` as a JSON string of a JWK) and TitleCase for enums.

6.  **Comprehensive Test Updates**:
    *   All relevant unit tests in `tool_handlers_test.go` have been updated to reflect the new pre-confirmation folder check, the behavior of `executeKsmExecuteConfirmedAction`, and to correctly validate the schema output from `get_record_type_schema` (including for `pamUser`).

These changes make `ksm-mcp` significantly more robust, AI-friendly, and easier to maintain regarding KSM record structures. 