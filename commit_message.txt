feat: Implement get_record_type_schema, embed templates, and mimic UI transformations

BREAKING CHANGE:
- The `create_secret` and `update_secret` tools now expect fields in a flattened dot-notation (e.g., `bankAccount.accountType`). The `value` for each field part must be a single-element string array.
- `create_secret` now returns a `folder_required_clarification` status if `folder_uid` is omitted, prompting the AI before action confirmation.

This commit introduces several major improvements to enhance AI interaction for record creation and management:

1.  **New Tool: `get_record_type_schema`**
    *   Provides a definitive way for AI to discover the fields, types, and requirements for any KSM record type.
    *   Output: Detailed schema including flattened field names, descriptions, types, required status, and example values for enums.
    *   Crucially, this schema now reflects UI-specific transformations (field additions/removals) for certain PAM record types by mimicking logic observed in the Vault client's `processGetRecordTypesResponse` function.

2.  **Embedded Record Templates (Comprehensive)**:
    *   All record definition templates (`fields.json`, `field-types.json`, and `*.json` files from `standard_templates/`, `pam_templates/`, and `pam_configuration_templates/`) are embedded into the binary.
    *   `internal/recordtemplates` package loads and parses these at startup.
    *   Ensured `field-types.json` includes definitions for all referenced types (e.g., added "script").

3.  **Improved `create_secret` Flow**:
    *   If `folder_uid` is omitted, MCP server returns `folder_required_clarification` *before* action confirmation.

4.  **Enhanced Flattened Field Processing (`processFieldsForSDK`)**:
    *   Robustly parses dot-notation fields.
    *   Correctly reconstructs complex nested objects for the KSM Go SDK, aligning with definitions in `field-data.ts` and KSM SDK structs.
    *   Handles type mapping (e.g., `keyPair` to SDK type `privateKey`) and basic type conversions (e.g., for `passkey` numeric fields).

5.  **UI-Mimicking Schema Transformations (`applyUITransformations`)**:
    *   The `GetSchema` function in `internal/recordtemplates/loader.go` now applies transformations to the base schema derived from templates to better match the effective schema used by the Keeper Vault UI for certain record types (especially PAM records).
    *   This includes removing fields like `login`, `password`, `privatePEMKey` from `pamMachine` schema output, and ensuring fields like `pamSettings` and `trafficEncryptionSeed` are correctly represented based on their template definitions.

6.  **Updated Tool Definitions (`tools.go`)**:
    *   Descriptions for `create_secret` and `update_secret` guide AI on flattened format, use of `get_record_type_schema`, JSON string for `passkey.privateKey`, and TitleCase for enums.

7.  **Comprehensive Test Updates**:
    *   Tests for `get_record_type_schema` now validate the transformed schemas for `pamUser` and `pamMachine`.
    *   Other tests adjusted for new folder handling and field processing logic.

These changes make `ksm-mcp` significantly more robust, providing more accurate schema information to the AI and streamlining the record creation process. 