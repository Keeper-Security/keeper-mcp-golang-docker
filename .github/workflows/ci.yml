name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily
    - cron: '0 0 * * *'

env:
  GO_VERSION: '1.21'
  DOCKER_BUILDKIT: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ['1.21', '1.22']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -func=coverage.out

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
      if: matrix.go == '1.21'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: ./...

    - name: Run Trivy vulnerability scanner (repo)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build binary
      run: |
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build \
          -ldflags="-w -s -X main.Version=${{ github.sha }}" \
          -o dist/ksm-mcp-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} \
          ./cmd/ksm-mcp

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ksm-mcp-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/ksm-mcp-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name != 'pull_request'

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: keeper/ksm-mcp
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner (image)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: keeper/ksm-mcp:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
      if: github.event_name != 'pull_request'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'
      if: github.event_name != 'pull_request' && always()

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'
    services:
      ksm-mcp:
        image: keeper/ksm-mcp:${{ github.sha }}
        env:
          KSM_MCP_LOG_LEVEL: debug
          KSM_MCP_BATCH_MODE: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run integration tests
      run: |
        # Run integration tests against the container
        docker run --rm \
          --network ${{ job.services.ksm-mcp.network }} \
          keeper/ksm-mcp:${{ github.sha }} \
          test --run-tests --mode integration

  e2e-test:
    name: E2E Test
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 10  # Wait for services to be ready

    - name: Run E2E tests
      run: |
        docker-compose exec -T ksm-mcp ksm-mcp test --run-tests --mode e2e

    - name: Collect logs
      if: failure()
      run: |
        docker-compose logs > docker-compose.log
        
    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-logs
        path: docker-compose.log

    - name: Cleanup
      if: always()
      run: docker-compose down -v