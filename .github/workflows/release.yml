name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  DOCKER_BUILDKIT: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: KSM MCP ${{ steps.get_version.outputs.version }}
        draft: true
        prerelease: false
        body: |
          ## Changes in this Release
          
          ### Features
          - 
          
          ### Bug Fixes
          - 
          
          ### Documentation
          - 
          
          ## Installation
          
          ### Docker
          ```bash
          docker pull keeper/ksm-mcp:${{ steps.get_version.outputs.version }}
          ```
          
          ### Binary
          Download the appropriate binary for your platform from the assets below.
          
          ### Homebrew (macOS/Linux)
          ```bash
          brew tap keeper-security/tap
          brew install ksm-mcp
          ```
          
          ## Checksums
          See `checksums.txt` in the release assets.

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            suffix: ''
          - os: linux
            arch: arm64
            suffix: ''
          - os: darwin
            arch: amd64
            suffix: ''
          - os: darwin
            arch: arm64
            suffix: ''
          - os: windows
            arch: amd64
            suffix: '.exe'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build binary
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        BINARY_NAME=ksm-mcp-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }}
        
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build \
          -ldflags="-w -s -X main.Version=${VERSION} -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
          -o ${BINARY_NAME} \
          ./cmd/ksm-mcp
        
        # Create archive
        if [ "${{ matrix.os }}" = "windows" ]; then
          zip ${BINARY_NAME}.zip ${BINARY_NAME}
          ARCHIVE=${BINARY_NAME}.zip
        else
          tar czf ${BINARY_NAME}.tar.gz ${BINARY_NAME}
          ARCHIVE=${BINARY_NAME}.tar.gz
        fi
        
        # Generate checksum
        sha256sum ${ARCHIVE} > ${ARCHIVE}.sha256

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./ksm-mcp-${{ needs.create-release.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.zip' || '.tar.gz' }}
        asset_name: ksm-mcp-${{ needs.create-release.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.zip' || '.tar.gz' }}
        asset_content_type: ${{ matrix.os == 'windows' && 'application/zip' || 'application/gzip' }}

    - name: Upload Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./ksm-mcp-${{ needs.create-release.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.zip' || '.tar.gz' }}.sha256
        asset_name: ksm-mcp-${{ needs.create-release.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.zip' || '.tar.gz' }}.sha256
        asset_content_type: text/plain

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          keeper/ksm-mcp
          ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.create-release.outputs.version }}

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [create-release, build-binaries]
    steps:
    - name: Checkout homebrew tap
      uses: actions/checkout@v4
      with:
        repository: keeper-security/homebrew-tap
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        path: homebrew-tap

    - name: Update formula
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        VERSION_NO_V=${VERSION#v}
        
        cd homebrew-tap
        
        # Update the formula
        sed -i "s/version \".*\"/version \"${VERSION_NO_V}\"/" Formula/ksm-mcp.rb
        
        # Commit and push
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add Formula/ksm-mcp.rb
        git commit -m "Update ksm-mcp to ${VERSION}"
        git push

  finalize-release:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: [create-release, build-binaries, docker-release]
    steps:
    - name: Publish release
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            draft: false
          })